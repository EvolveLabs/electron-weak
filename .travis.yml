#language: node_js
#node_js:
#  - "iojs"

git:
  depth: 10

os:
  - linux
  - osx

env:
  global:
    - PATH: ./node_modules/electron-updater-tools/bin:$PATH
    - PUBLISH_BINARY: false
    - NODE_VERSION: iojs
    - ELECTRON_VERSION: 0.28.2
    # Other available variables:
    # s3accessKeyId
    # s3secretAccessKey

before_install:
  # nvm is not yet supported on osx, manually install
  - git clone https://github.com/creationix/nvm.git /tmp/.nvm
  - source /tmp/.nvm/nvm.sh
  - nvm install $NODE_VERSION
  - nvm use $NODE_VERSION
  # native dependencies
  - if [ $TRAVIS_OS_NAME == "linux" ]; then
      sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
      sudo apt-get update -qq
      sudo apt-get install -qq gcc-4.8 g++-4.8 gcc-4.8.multilib g++-4.8-multilib libelf-dev
      sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 90 --slave /usr/bin/g++ g++ /usr/bin/g++-4.8
    fi
  # Only Publish when building a tag
  - if [[ $TRAVIS_BRANCH == `git describe --tags --always HEAD` ]]; then PUBLISH_BINARY=true; fi;
  # or if we put [publish binary] in the commit message
  - COMMIT_MESSAGE=$(git show -s --format=%B $TRAVIS_COMMIT | tr -d '\n')
  - if test "${COMMIT_MESSAGE#*'[publish binary]'}" != "$COMMIT_MESSAGE"; then PUBLISH_BINARY=true; fi;

install:
  - nvm install iojs
  # npm dependencies
  - npm install node-gyp -g
  - npm install electron-prebuilt -g
  - npm install

script:
  - elb configure release x64
  - if [[ $TRAVIS_OS_NAME != osx ]]; then elb configure release x86; fi

after_success:
  # pack the binaries for this platform
  - elpack --configuration release --arch x64
  - if [[ $TRAVIS_OS_NAME != osx ]]; then elpack --configuration release --arch x86; fi
  # publish to s3
  - if [[ $PUBLISH_BINARY == true ]]; then elpub -b evolve-bin -i $s3accessKeyId -k $s3secretAccessKey -C release -a x64; fi
  - if [[ $PUBLISH_BINARY == true ] && [ $TRAVIS_OS_NAME != osx ]]; then elpub -b evolve-bin -i $s3accessKeyId -k $s3secretAccessKey -C release -a x86; fi